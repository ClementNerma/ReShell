{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ReShell",
	"patterns": [
		{
			"include": "#core"
		}
	],
	"repository": {
		"core": {
			"patterns": [
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double",
					"patterns": [
						{
							"begin": "`",
							"end": "`",
							"name": "string.quoted.single",
							"patterns": [
								{
									"include": "#core"
								}
							]
						},
						{
							"begin": "\\$\\(",
							"end": "\\)",
							"name": "string.quoted.single",
							"patterns": [
								{
									"include": "#core"
								}
							]
						},
						{
							"match": "\\\\.",
							"name": "constant.character.escape"
						},
						{
							"match": "\\$[a-zA-Z_][a-zA-Z0-9_]*\\b",
							"name": "variable.name"
						}
					]
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape"
						}
					]
				},
				{
					"begin": "#",
					"end": "$",
					"name": "comment"
				},
				{
					"match": "(?<=\\s)\\-\\-[a-zA-Z0-9\\-_]+|\\-[a-zA-Z]\\b",
					"name": "constant"
				},
				{
					"match": "\\b(let|mut|if|else|for|in|while|switch|case|continue|break|fn|return|throw|alias|type|try|catch)\\b",
					"name": "keyword"
				},
				{
					"match": "\\b(self)\\b",
					"name": "keyword"
				},
				{
					"match": "\\b(direct|include)\\b",
					"name": "keyword"
				},
				{
					"match": "\\b(any|bool|int|float|string|list|map|error|struct|fn|cmdcall)\\b",
					"name": "storage.type"
				},
				{
					"match": "\\b(true|false|null)\\b",
					"name": "constant.language"
				},
				{
					"match": "\\$[a-zA-Z_][a-zA-Z0-9_]*\\b",
					"name": "variable.name"
				},
				{
					"match": "@[a-zA-Z_][a-zA-Z0-9_]*\\b",
					"name": "entity.name.function"
				},
				{
					"match": "[\\$@]\\(",
					"name": "keyword"
				},
				{
					"match": "(?<=\\blet\\s+(mut\\s+)?)[a-zA-Z_][a-zA-Z0-9_]*\\b",
					"name": "variable.name"
				},
				{
					"match": "(?<=\\balias\\s+)[a-zA-Z_][a-zA-Z0-9_]*\\b",
					"name": "entity.name.function"
				},
				{
					"match": "(?<=alias\\s+[a-zA-Z_][a-zA-Z0-9_]*\\s+=\\s+)([a-zA-Z_][a-zA-Z0-9_]*)\\b",
					"name": "entity.name.function"
				},
				{
					"match": "(?<=\\bfor\\s+)[a-zA-Z_][a-zA-Z0-9_]*\\b",
					"name": "variable.name"
				},
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*[\\?]?:)",
					"name": "variable.name"
				},
				{
					"match": "\\b(\\d+(?:\\.\\d+)?)\\b",
					"name": "constant.numeric"
				},
				{
					"match": "(?<=\\\\\\n\\s+)([a-zA-Z0-9_/\\-\\.]+)",
					"name": "string.unquoted"
				},
				{
					"match": "(?<=(^|[\\(\\{;])\\s*)([a-zA-Z0-9_/\\-\\.]+)\\b",
					"name": "entity.name.function"
				},
				{
					"match": "(?<=\\b|[\\?]?\\.)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()",
					"name": "entity.name.function"
				},
				{
					"match": "(?<=[\\?]?\\.)([a-zA-Z_][a-zA-Z0-9_]*)",
					"name": "variable.name"
				},
				{
					"match": "(?<=(&&|;|\\||\\->|direct)\\s*)([a-zA-Z_][a-zA-Z0-9_-]+)\\b",
					"name": "entity.name.function"
				},
				{
					"match": "(!|\\->)",
					"name": "keyword.operator"
				},
				{
					"match": "\\s([\\+\\-\\*\\/%=\\?]|&&|\\!=|\\|\\||\\|)(?=\\s|$)",
					"name": "keyword.operator"
				},
				{
					"match": "(?<=[,\\s])\\.\\.\\.(?=\\$)",
					"name": "keyword.operator"
				},
				{
					"match": "([\\(\\)\\[\\]\\{\\}])",
					"name": "keyword.operator"
				},
				{
					"match": "([,;:])",
					"name": "keyword.operator"
				},
				{
					"match": ".",
					"name": "string.unquoted"
				}
			]
		}
	},
	"scopeName": "source.reshell"
}